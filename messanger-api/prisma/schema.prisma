generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  email     String @unique
  nickname  String @unique
  imageUrl  String @default("https://avatars.githubusercontent.com/u/33729094?v=4") @map("image_url")
  firstName String @map("first_name")
  lastName  String @map("last_name")
  password  String

  messages Message[]
  admins   Chat[]    @relation("admins")

  chats UserChat[]

  @@map("user")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [sender], references: [id])
  sender String @map("sender")

  messageBody String?  @map("message_body")
  fileList    String[] @map("file_list")

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @map("chat_id")

  @@map("message")
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String

  isGroup Boolean @default(false) @map("is_group")

  imageUrl String @map("image_url")

  user  User   @relation("admins", fields: [admin], references: [id])
  admin String @map("admin")

  participants UserChat[]

  messages Message[]

  @@map("chat")
}

model UserChat {
  chat      Chat   @relation(fields: [chatId], references: [id])
  chatId    String @map("chat_id")
  user      User   @relation(fields: [userId], references: [id])
  userId    String @map("user_id")
  email     String @map("email")
  imageUrl  String @map("image_url")
  firstName String @map("first_name")
  lastName  String @map("last_name")
  nickname  String @map("nickname")

  @@id([userId, chatId])
  @@map("user_chat")
}
